// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package metaMaster

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NFTInfoStoragesalesInfo is an auto generated low-level Go binding around an user-defined struct.
type NFTInfoStoragesalesInfo struct {
	Sales      common.Address
	Collection common.Address
	TokenId    *big.Int
	Token      common.Address
	Price      *big.Int
	Duetime    uint64
	Seller     common.Address
}

// MetaMasterMetaData contains all meta data concerning the MetaMaster contract.
var MetaMasterMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"NewCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sale\",\"type\":\"address\"}],\"name\":\"addMarketSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_max_supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metaInfo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltiesReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPercentageInBips\",\"type\":\"uint256\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"token_id\",\"type\":\"uint96\"}],\"name\":\"getSaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"token_id\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duetime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"structNFTInfoStorage.salesInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getSales\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"token_id\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duetime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"structNFTInfoStorage.salesInfo[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collcetion\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getSalesByCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"token_id\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duetime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"structNFTInfoStorage.salesInfo[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getSalesByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"token_id\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duetime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"structNFTInfoStorage.salesInfo[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSalesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSalesCountByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getUserBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"token_id\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duetime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"structNFTInfoStorage.salesInfo[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBidsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getUserBuys\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"token_id\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duetime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"structNFTInfoStorage.salesInfo[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBuysCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketSales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"market\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_due\",\"type\":\"uint256\"}],\"name\":\"mintAndSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"record\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"recordDelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"record\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"recordItemCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"record\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"recordItemSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"record\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"recordNewBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"record\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"recordNewItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"market\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_due\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metaInfo\",\"type\":\"string\"}],\"name\":\"setCollectionMetaInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltiesReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPercentageInBips\",\"type\":\"uint256\"}],\"name\":\"setCollectionRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeInBips\",\"type\":\"uint256\"}],\"name\":\"setFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTokenSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIsSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userOwnedCollectionNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userOwnedCollections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a3361006b565b600b80546001600160a01b0319163317905560fa600c5560008052600d6020527f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee805460ff191660011790556100bb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61507480620000cb6000396000f3fe60806040523480156200001157600080fd5b5060043610620002385760003560e01c8063807421f11162000135578063cdfde4e411620000bd578063e70619501162000087578063e706195014620004cf578063e782fae714620004f5578063f2fde38b146200050c578063fa4c21fe1462000523578063ffff0d11146200053a5762000238565b8063cdfde4e41462000480578063d7bb55221462000497578063dd8027db14620004ae578063e07a311114620004b85762000238565b8063b22eb9ba11620000ff578063b22eb9ba1462000431578063b78fd5b31462000448578063c415b95c146200045f578063c543e0fe14620004695762000238565b8063807421f114620003e25780638365125514620003f95780638da5cb5b1462000410578063a2499201146200041a5762000238565b80632c32b2d611620001c557806352374f6f116200018f57806352374f6f146200036d57806363a24e22146200038457806365e84a20146200039b578063712811be14620003b2578063715018a614620003d85762000238565b80632c32b2d614620003115780632feeab36146200032857806341084242146200033f57806346eb67ef14620003565762000238565b80631a92777911620002075780631a92777914620002b5578063221375a614620002cc57806328044ef914620002e35780632b171c7114620002fa5762000238565b806308d3fed3146200023d5780630c6a753f14620002565780630e716d97146200026d57806315412a96146200028f575b600080fd5b620002546200024e366004620024a5565b62000560565b005b620002546200026736600462002123565b620005d0565b6200027762000638565b604051620002869190620028af565b60405180910390f35b620002a6620002a036600462002264565b6200063e565b604051620002869190620026a1565b620002a6620002c63660046200252d565b620007c6565b62000277620002dd36600462002077565b6200091f565b62000277620002f436600462002039565b620009eb565b620002776200030b36600462002039565b62000a0a565b620002a66200032236600462002264565b62000a25565b6200025462000339366004620024a5565b62000af5565b6200025462000350366004620024a5565b62000b36565b6200025462000367366004620024cc565b62000b9f565b620002776200037e36600462002039565b62000d57565b6200025462000395366004620021b3565b62000d80565b62000254620003ac366004620020de565b62000daa565b620003c9620003c336600462002236565b62000eda565b60405162000286919062002609565b6200025462000f13565b620003c9620003f336600462002473565b62000f55565b620002a66200040a36600462002264565b62000f80565b620003c962001164565b620002546200042b36600462002160565b62001173565b620002546200044236600462002039565b62001215565b620002a66200045936600462002264565b620012a5565b620003c962001423565b620003c96200047a36600462002039565b62001432565b6200025462000491366004620024a5565b6200144d565b62000254620004a83660046200229b565b6200148e565b6200027762001723565b62000254620004c936600462002236565b62001736565b620004e6620004e036600462002039565b62001790565b604051620002869190620026f3565b620002776200050636600462002039565b620017a5565b620002546200051d36600462002039565b620017c8565b620003c96200053436600462002399565b62001830565b620005516200054b366004620022e1565b62001a6b565b6040516200028691906200289f565b3360009081526007602052604090205460ff166200057d57600080fd5b6200058a60018362001a90565b50600082815260036020908152604080832080546001600160a01b031916331790556001600160a01b038416835260069091529020620005cb908362001a90565b505050565b33620005db62001164565b6001600160a01b0316146200060d5760405162461bcd60e51b8152600401620006049062002847565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b600c5481565b6060826001600160401b038111156200066757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015620006a457816020015b6200069062001f54565b815260200190600190039081620006865790505b50905060006001815b8481108015620006ba5750815b8015620006d057506000831180620006d0575080155b1562000713576001600160a01b0387166000908152600660205260409020620006fa908462001aa7565b93509150806200070a81620028ed565b915050620006ad565b5060005b8581108015620007245750815b80156200073a575060008311806200073a575080155b15620007bc576001600160a01b038716600090815260066020526040902062000764908462001aa7565b935091508115620007a7576200077a8362001ac3565b8482815181106200079b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b80620007b381620028ed565b91505062000717565b5050509392505050565b6060826001600160401b03811115620007ef57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156200082c57816020015b6200081862001f54565b8152602001906001900390816200080e5790505b50905060006001815b8481108015620008425750815b8015620008585750600083118062000858575080155b1562000884576200086b60018462001aa7565b93509150806200087b81620028ed565b91505062000835565b5060005b8581108015620008955750815b8015620008ab57506000831180620008ab575080155b156200091657620008be60018462001aa7565b9350915081156200090157620008d48362001ac3565b848281518110620008f557634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b806200090d81620028ed565b91505062000888565b50505092915050565b6001600160a01b0383811660009081526008602052604081205490911633146200095d5760405162461bcd60e51b815260040162000604906200287c565b60405163d0def52160e01b81526001600160a01b0385169063d0def521906200098d908690869060040162002641565b602060405180830381600087803b158015620009a857600080fd5b505af1158015620009bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e391906200248c565b949350505050565b6001600160a01b0381166000908152600960205260409020545b919050565b6001600160a01b031660009081526005602052604090205490565b6060826001600160401b0381111562000a4e57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801562000a8b57816020015b62000a7762001f54565b81526020019060019003908162000a6d5790505b50905060005b8381101562000aed5762000aab856200054b8686620028b8565b82828151811062000acc57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808062000ae490620028ed565b91505062000a91565b509392505050565b3360009081526007602052604090205460ff1662000b1257600080fd5b6001600160a01b0381166000908152600460205260409020620005cb908362001a90565b3360009081526007602052604090205460ff1662000b5357600080fd5b600082815260036020908152604080832080546001600160a01b03191690556001600160a01b03841683526006909152902062000b91908362001c41565b50620005cb60018362001c41565b3360009081526007602052604090205460ff1662000bbc57600080fd5b60008062000bca8762001ce4565b600089815260036020908152604080832080546001600160a01b03191690556001600160a01b038b16835260069091529020919350915062000c0d908862001c41565b5062000c1b60018862001c41565b506001600160a01b039485166000908152600560208181526040808420815160e081018352338152968a168784019081526001600160601b03968716928801928352988a16606088019081526001600160801b03988916608089019081526001600160401b0342811660a08b019081529d8d1660c08b01908152845460018181018755958a52969098209951959096029098018054948c166001600160a01b03199586161781559951918a0180549351909716600160a01b02918b16928416929092178a1617909455925160028701805491891691851691909117905592516003860180549851909416600160801b0267ffffffffffffffff60801b19919095166fffffffffffffffffffffffffffffffff19909816979097179690961692909217905592516004909101805491909216921691909117905550565b6001600160a01b038116600090815260046020526040812062000d7a9062001cec565b92915050565b600062000d8f8733886200091f565b905062000da18782878787876200148e565b50505050505050565b6001600160a01b0383811660009081526008602052604090205416331462000de65760405162461bcd60e51b815260040162000604906200287c565b612710600c548262000df99190620028b8565b111562000e1a5760405162461bcd60e51b81526004016200060490620027aa565b60405163b514371560e01b81526001600160a01b0384169063b51437159062000e4890859060040162002609565b600060405180830381600087803b15801562000e6357600080fd5b505af115801562000e78573d6000803e3d6000fd5b5050604051637bc41acd60e11b81526001600160a01b038616925063f788359a915062000eaa908490600401620028af565b600060405180830381600087803b15801562000ec557600080fd5b505af115801562000da1573d6000803e3d6000fd5b6009602052816000526040600020818154811062000ef757600080fd5b6000918252602090912001546001600160a01b03169150829050565b3362000f1e62001164565b6001600160a01b03161462000f475760405162461bcd60e51b8152600401620006049062002847565b62000f53600062001cf0565b565b600a818154811062000f6657600080fd5b6000918252602090912001546001600160a01b0316905081565b6060826001600160401b0381111562000fa957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801562000fe657816020015b62000fd262001f54565b81526020019060019003908162000fc85790505b506001600160a01b0385166000908152600560205260409020549091508083111562001010578092505b806200101d8585620028b8565b11156200103357620010308382620028d3565b93505b60005b848110156200115b576001600160a01b0386166000908152600560205260409020620010638284620028d3565b815481106200108257634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e08101825260059390930290910180546001600160a01b039081168452600182015480821695850195909552600160a01b9094046001600160601b03169183019190915260028101548316606083015260038101546001600160801b0381166080840152600160801b90046001600160401b031660a08301526004015490911660c082015283518490839081106200113a57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806200115290620028ed565b91505062001036565b50509392505050565b6000546001600160a01b031690565b6001600160a01b03828116600090815260086020526040902054163314620011af5760405162461bcd60e51b815260040162000604906200287c565b6040516374d670ef60e01b81526001600160a01b038316906374d670ef90620011dd908490600401620026fe565b600060405180830381600087803b158015620011f857600080fd5b505af11580156200120d573d6000803e3d6000fd5b505050505050565b336200122062001164565b6001600160a01b031614620012495760405162461bcd60e51b8152600401620006049062002847565b600a8054600180820183556000929092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b038416179055620012a290829062001d40565b50565b6060826001600160401b03811115620012ce57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156200130b57816020015b620012f762001f54565b815260200190600190039081620012ed5790505b50905060006001815b8481108015620013215750815b8015620013375750600083118062001337575080155b156200137a576001600160a01b038716600090815260046020526040902062001361908462001aa7565b93509150806200137181620028ed565b91505062001314565b5060005b85811080156200138b5750815b8015620013a157506000831180620013a1575080155b15620007bc576001600160a01b0387166000908152600460205260409020620013cb908462001aa7565b9350915081156200140e57620013e18362001ac3565b8482815181106200140257634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b806200141a81620028ed565b9150506200137e565b600b546001600160a01b031681565b6008602052600090815260409020546001600160a01b031681565b3360009081526007602052604090205460ff166200146a57600080fd5b6001600160a01b0381166000908152600460205260409020620005cb908362001c41565b600a548410620014b25760405162461bcd60e51b81526004016200060490620027f9565b6040516331a9108f60e11b815233906001600160a01b03881690636352211e90620014e2908990600401620028af565b60206040518083038186803b158015620014fb57600080fd5b505afa15801562001510573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001536919062002058565b6001600160a01b0316146200155f5760405162461bcd60e51b815260040162000604906200287c565b6001600160a01b0383166000908152600d602052604090205460ff166200159a5760405162461bcd60e51b81526004016200060490620027d4565b816001600160801b03168214620015c55760405162461bcd60e51b815260040162000604906200281f565b856001600160a01b031663086b244433600a8781548110620015f757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160e01b031960e085901b1681526200163292916001600160a01b0316908a906004016200261d565b600060405180830381600087803b1580156200164d57600080fd5b505af115801562001662573d6000803e3d6000fd5b50505050600a84815481106200168857634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163370b008160e01b81526001600160a01b039091169063370b008190620016cd9089908990339089908990899060040162002667565b602060405180830381600087803b158015620016e857600080fd5b505af1158015620016fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000da191906200248c565b600062001731600162001cec565b905090565b336200174162001164565b6001600160a01b0316146200176a5760405162461bcd60e51b8152600401620006049062002847565b600b80546001600160a01b0319166001600160a01b039390931692909217909155600c55565b600d6020526000908152604090205460ff1681565b6001600160a01b038116600090815260066020526040812062000d7a9062001cec565b33620017d362001164565b6001600160a01b031614620017fc5760405162461bcd60e51b8152600401620006049062002847565b6001600160a01b038116620018255760405162461bcd60e51b8152600401620006049062002764565b620012a28162001cf0565b6000612710600c5483620018459190620028b8565b1115620018665760405162461bcd60e51b81526004016200060490620027aa565b6000888888886040516200187a9062001f90565b62001889949392919062002713565b604051809103906000f080158015620018a6573d6000803e3d6000fd5b506040516374d670ef60e01b81529091506001600160a01b038216906374d670ef90620018d8908890600401620026fe565b600060405180830381600087803b158015620018f357600080fd5b505af115801562001908573d6000803e3d6000fd5b5050604051637bc41acd60e11b81526001600160a01b038416925063f788359a91506200193a908690600401620028af565b600060405180830381600087803b1580156200195557600080fd5b505af11580156200196a573d6000803e3d6000fd5b505060405163b514371560e01b81526001600160a01b038416925063b514371591506200199c90879060040162002609565b600060405180830381600087803b158015620019b757600080fd5b505af1158015620019cc573d6000803e3d6000fd5b505050506001600160a01b03811660008181526008602090815260408083208054336001600160a01b0319918216811790925581855260098452828520805460018101825590865293909420909201805490931690931790915590517f5b84d9550adb7000df7bee717735ecd3af48ea3f66c6886d52e8227548fb228c9062001a5790849062002609565b60405180910390a298975050505050505050565b62001a7562001f54565b600062001a83848462001d6b565b9050620009e38162001ac3565b600062001aa08383600162001da3565b9392505050565b60008062001ab88484600162001db4565b915091509250929050565b62001acd62001f54565b6000828152600360205260409020546001600160a01b03168062001b2c5750506040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915262000a05565b6000806000806000856001600160a01b03166364b3b844896040518263ffffffff1660e01b815260040162001b629190620028af565b60c06040518083038186803b15801562001b7b57600080fd5b505afa15801562001b90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bb691906200231d565b50945094509450945094508462001bcc57600095505b60008062001bda8a62001ce4565b6040805160e0810182526001600160a01b039b8c168152928b1660208401526001600160601b039190911690820152958816606087015250506001600160801b0390921660808401526001600160401b031660a083015290921660c0830152509050919050565b600081158062001c5a575062001c58838362001dff565b155b1562001c695750600062000d7a565b60008281526001848101602090815260408084208480529091528083205482845292205462001c9d92869290919062001e89565b6000828152600184810160209081526040808420848052909152808320839055818352822082905584549091859162001cd8908490620028d3565b90915550919392505050565b606081901c91565b5490565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b600062001d8c6bffffffffffffffffffffffff19606085901b1682620028b8565b905062001aa06001600160601b03831682620028b8565b6000620009e3846000858562001ebe565b60008062001dc3858562001dff565b62001dd45750600090508062001df7565b505060008281526001848101602090815260408084208515158552909152909120545b935093915050565b6000818152600183016020908152604080832083805290915281205415801562001e4357506000828152600180850160209081526040808420928452919052902054155b1562001e8057600080805260018085016020908152604080842092845291905290205482141562001e775750600162000d7a565b50600062000d7a565b50600162000d7a565b600082815260019094016020818152604080872093158088529382528087208690559486529081528385209115855252912055565b600062001ecc858462001dff565b15801562001ee1575062001ee1858562001dff565b1562001f495760008481526001860160209081526040808320851515845290915290205462001f138686868662001e89565b62001f218685838662001e89565b600186600001600082825462001f389190620028b8565b9091555060019250620009e3915050565b506000949350505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6126e2806200295d83390190565b803562000a058162002937565b600082601f83011262001fbc578081fd5b81356001600160401b038082111562001fd95762001fd962002921565b604051601f8301601f19908116603f0116810190828211818310171562002004576200200462002921565b816040528381528660208588010111156200201d578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156200204b578081fd5b813562001aa08162002937565b6000602082840312156200206a578081fd5b815162001aa08162002937565b6000806000606084860312156200208c578182fd5b8335620020998162002937565b92506020840135620020ab8162002937565b915060408401356001600160401b03811115620020c6578182fd5b620020d48682870162001fab565b9150509250925092565b600080600060608486031215620020f3578283fd5b8335620021008162002937565b92506020840135620021128162002937565b929592945050506040919091013590565b6000806040838503121562002136578182fd5b8235620021438162002937565b9150602083013562002155816200294d565b809150509250929050565b6000806040838503121562002173578182fd5b8235620021808162002937565b915060208301356001600160401b038111156200219b578182fd5b620021a98582860162001fab565b9150509250929050565b60008060008060008060c08789031215620021cc578182fd5b8635620021d98162002937565b955060208701356001600160401b03811115620021f4578283fd5b6200220289828a0162001fab565b9550506040870135935060608701356200221c8162002937565b9598949750929560808101359460a0909101359350915050565b6000806040838503121562002249578182fd5b8235620022568162002937565b946020939093013593505050565b60008060006060848603121562002279578283fd5b8335620022868162002937565b95602085013595506040909401359392505050565b60008060008060008060c08789031215620022b4578182fd5b8635620022c18162002937565b9550602087013594506040870135935060608701356200221c8162002937565b60008060408385031215620022f4578182fd5b8235620023018162002937565b915060208301356001600160601b038116811462002155578182fd5b60008060008060008060c0878903121562002336578384fd5b865162002343816200294d565b6020880151909650620023568162002937565b8095505060408701519350606087015192506080870151620023788162002937565b60a08801519092506200238b8162002937565b809150509295509295509295565b600080600080600080600060e0888a031215620023b4578485fd5b87356001600160401b0380821115620023cb578687fd5b620023d98b838c0162001fab565b985060208a0135915080821115620023ef578687fd5b620023fd8b838c0162001fab565b975060408a013591508082111562002413578687fd5b620024218b838c0162001fab565b965060608a0135955060808a01359150808211156200243e578283fd5b506200244d8a828b0162001fab565b9350506200245e60a0890162001f9e565b915060c0880135905092959891949750929550565b60006020828403121562002485578081fd5b5035919050565b6000602082840312156200249e578081fd5b5051919050565b60008060408385031215620024b8578182fd5b823591506020830135620021558162002937565b600080600080600060a08688031215620024e4578283fd5b853594506020860135620024f88162002937565b935060408601356200250a8162002937565b925060608601356200251c8162002937565b949793965091946080013592915050565b6000806040838503121562002540578182fd5b50508035926020909101359150565b60008151808452815b81811015620025765760208185018101518683018201520162002558565b81811115620025885782602083870101525b50601f01601f19169290920160200192915050565b80516001600160a01b0390811683526020808301518216908401526040808301516001600160601b0316908401526060808301518216908401526080808301516001600160801b03169084015260a0828101516001600160401b03169084015260c09182015116910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208201819052600090620009e3908301846200254f565b6001600160a01b0396871681526020810195909552928516604085015293166060830152608082019290925260a081019190915260c00190565b6020808252825182820181905260009190848201906040850190845b81811015620026e757620026d38385516200259d565b9284019260e09290920191600101620026bd565b50909695505050505050565b901515815260200190565b60006020825262001aa060208301846200254f565b6000608082526200272860808301876200254f565b82810360208401526200273c81876200254f565b905082810360408401526200275281866200254f565b91505082606083015295945050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526010908201526f526f79616c7479206f766572666c6f7760801b604082015260600190565b6020808252600b908201526a2bb937b733903a37b5b2b760a91b604082015260600190565b6020808252600c908201526b15dc9bdb99c81b585c9ad95d60a21b604082015260600190565b6020808252600e908201526d5072696365206f766572666c6f7760901b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b60e0810162000d7a82846200259d565b90815260200190565b60008219821115620028ce57620028ce6200290b565b500190565b600082821015620028e857620028e86200290b565b500390565b60006000198214156200290457620029046200290b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620012a257600080fd5b8015158114620012a257600080fdfe60806040523480156200001157600080fd5b50604051620026e2380380620026e2833981016040819052620000349162000271565b83836200004133620000c8565b81516200005690600190602085019062000118565b5080516200006c90600290602084019062000118565b50508251620000849150601090602085019062000118565b50600d8190556001600160601b0381168114620000be5760405162461bcd60e51b8152600401620000b59062000306565b60405180910390fd5b5050505062000390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805462000126906200033d565b90600052602060002090601f0160209004810192826200014a576000855562000195565b82601f106200016557805160ff191683800117855562000195565b8280016001018555821562000195579182015b828111156200019557825182559160200191906001019062000178565b50620001a3929150620001a7565b5090565b5b80821115620001a35760008155600101620001a8565b600082601f830112620001cf578081fd5b81516001600160401b0380821115620001ec57620001ec6200037a565b604051601f8301601f19908116603f011681019082821181831017156200021757620002176200037a565b8160405283815260209250868385880101111562000233578485fd5b8491505b8382101562000256578582018301518183018401529082019062000237565b838211156200026757848385830101525b9695505050505050565b6000806000806080858703121562000287578384fd5b84516001600160401b03808211156200029e578586fd5b620002ac88838901620001be565b95506020870151915080821115620002c2578485fd5b620002d088838901620001be565b94506040870151915080821115620002e6578384fd5b50620002f587828801620001be565b606096909601519497939650505050565b6020808252601b908201527f546f6f206d616e7920737570706c6965733a206f766572666c6f770000000000604082015260600190565b6002810460018216806200035257607f821691505b602082108114156200037457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61234280620003a06000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063b5143715116100a2578063d0def52111610071578063d0def52114610399578063e985e9c5146103ac578063f2fde38b146103bf578063f788359a146103d2576101cf565b8063b514371514610358578063b70aeaf41461036b578063b88d4fde14610373578063c87b56dd14610386576101cf565b80638da5cb5b116100de5780638da5cb5b1461032d57806395d89b4114610335578063a22cb4651461033d578063a3a51bd514610350576101cf565b806370a08231146102ff578063715018a61461031257806374d670ef1461031a576101cf565b806323b872dd1161017157806332cb6b0c1161014b57806332cb6b0c146102be57806342842e0e146102c65780634f6ccce7146102d95780636352211e146102ec576101cf565b806323b872dd146102775780632a55205a1461028a5780632f745c59146102ab576101cf565b8063086b2444116101ad578063086b244414610232578063095ea7b31461024757806318160ddd1461025a5780632175c9901461026f576101cf565b806301ffc9a7146101d457806306fdde03146101fd578063081812fc14610212575b600080fd5b6101e76101e2366004611a36565b6103e5565b6040516101f49190611bbb565b60405180910390f35b610205610412565b6040516101f49190611bc6565b610225610220366004611aa1565b6104a4565b6040516101f49190611b51565b6102456102403660046118d3565b6104f0565b005b610245610255366004611a0d565b61052f565b6102626105c2565b6040516101f4919061219c565b6102626105c8565b6102456102853660046118d3565b6105ce565b61029d610298366004611ab9565b6105fb565b6040516101f4929190611ba2565b6102626102b9366004611a0d565b610632565b610262610684565b6102456102d43660046118d3565b61068a565b6102626102e7366004611aa1565b6106a5565b6102256102fa366004611aa1565b610700565b61026261030d366004611887565b610735565b610245610779565b610245610328366004611a6e565b6107b4565b6102256107fa565b610205610809565b61024561034b366004611987565b610818565b61022561082a565b610245610366366004611887565b610839565b61020561088a565b61024561038136600461190e565b610918565b610205610394366004611aa1565b610957565b6102626103a73660046119c1565b610962565b6101e76103ba3660046118a1565b610a9a565b6102456103cd366004611887565b610ac8565b6102456103e0366004611aa1565b610b29565b600063152a902d60e11b6001600160e01b03198316148061040a575061040a82610b5d565b90505b919050565b6060600180546104219061224a565b80601f016020809104026020016040519081016040528092919081815260200182805461044d9061224a565b801561049a5780601f1061046f5761010080835404028352916020019161049a565b820191906000526020600020905b81548152906001019060200180831161047d57829003601f168201915b5050505050905090565b60006104af82610b82565b6104d45760405162461bcd60e51b81526004016104cb90611fee565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b336104f96107fa565b6001600160a01b03161461051f5760405162461bcd60e51b81526004016104cb9061203a565b61052a838383610b9f565b505050565b600061053a82610700565b9050806001600160a01b0316836001600160a01b0316141561056e5760405162461bcd60e51b81526004016104cb906120be565b806001600160a01b0316610580610cd2565b6001600160a01b0316148061059c575061059c816103ba610cd2565b6105b85760405162461bcd60e51b81526004016104cb90611e2a565b61052a8383610cd6565b60095490565b600f5481565b6105df6105d9610cd2565b82610d44565b61051f5760405162461bcd60e51b81526004016104cb906120ff565b6000806000612710600f548561061191906121e8565b61061b91906121d4565b600e546001600160a01b0316969095509350505050565b600061063d83610735565b821061065b5760405162461bcd60e51b81526004016104cb90611bd9565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b600d5481565b61052a83838360405180602001604052806000815250610918565b60006106af6105c2565b82106106cd5760405162461bcd60e51b81526004016104cb90612150565b600982815481106106ee57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600360205260408120546001600160a01b03168061040a5760405162461bcd60e51b81526004016104cb90611ed1565b60006001600160a01b03821661075d5760405162461bcd60e51b81526004016104cb90611e87565b506001600160a01b031660009081526004602052604090205490565b336107826107fa565b6001600160a01b0316146107a85760405162461bcd60e51b81526004016104cb9061203a565b6107b26000610dc9565b565b336107bd6107fa565b6001600160a01b0316146107e35760405162461bcd60e51b81526004016104cb9061203a565b80516107f6906011906020840190611742565b5050565b6000546001600160a01b031690565b6060600280546104219061224a565b6107f6610823610cd2565b8383610e19565b600e546001600160a01b031681565b336108426107fa565b6001600160a01b0316146108685760405162461bcd60e51b81526004016104cb9061203a565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b601180546108979061224a565b80601f01602080910402602001604051908101604052809291908181526020018280546108c39061224a565b80156109105780601f106108e557610100808354040283529160200191610910565b820191906000526020600020905b8154815290600101906020018083116108f357829003601f168201915b505050505081565b610929610923610cd2565b83610d44565b6109455760405162461bcd60e51b81526004016104cb906120ff565b61095184848484610ebc565b50505050565b606061040a82610eef565b60003361096d6107fa565b6001600160a01b0316146109935760405162461bcd60e51b81526004016104cb9061203a565b600d5461099e6105c2565b11156109bc5760405162461bcd60e51b81526004016104cb90611d01565b60008251116109ca57600080fd5b600c826040516109da9190611b06565b9081526040519081900360200190205460ff16600114156109fa57600080fd5b6001600c83604051610a0c9190611b06565b908152604051908190036020019020805460ff9290921660ff199092169190911790556000610a396105c2565b610a449060016121bc565b9050610a508482611008565b610a5a8184611022565b7ff3cea5493d790af0133817606f7350a91d7f154ea52eaa79d179d4d231e501028185604051610a8b9291906121a5565b60405180910390a19392505050565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b33610ad16107fa565b6001600160a01b031614610af75760405162461bcd60e51b81526004016104cb9061203a565b6001600160a01b038116610b1d5760405162461bcd60e51b81526004016104cb90611c76565b610b2681610dc9565b50565b33610b326107fa565b6001600160a01b031614610b585760405162461bcd60e51b81526004016104cb9061203a565b600f55565b60006001600160e01b0319821663780e9d6360e01b148061040a575061040a82611066565b6000908152600360205260409020546001600160a01b0316151590565b826001600160a01b0316610bb282610700565b6001600160a01b031614610bd85760405162461bcd60e51b81526004016104cb90611cbc565b6001600160a01b038216610bfe5760405162461bcd60e51b81526004016104cb90611d63565b610c098383836110a6565b610c14600082610cd6565b6001600160a01b0383166000908152600460205260408120805460019290610c3d908490612207565b90915550506001600160a01b0382166000908152600460205260408120805460019290610c6b9084906121bc565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a461052a83838361052a565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d0b82610700565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610d4f82610b82565b610d6b5760405162461bcd60e51b81526004016104cb90611dde565b6000610d7683610700565b9050806001600160a01b0316846001600160a01b03161480610d9d5750610d9d8185610a9a565b80610dc15750836001600160a01b0316610db6846104a4565b6001600160a01b0316145b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03161415610e4b5760405162461bcd60e51b81526004016104cb90611da7565b6001600160a01b0383811660008181526006602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610eaf908590611bbb565b60405180910390a3505050565b610ec7848484610b9f565b610ed3848484846110b1565b6109515760405162461bcd60e51b81526004016104cb90611c24565b6060610efa82610b82565b610f165760405162461bcd60e51b81526004016104cb90611f9d565b6000828152600b602052604081208054610f2f9061224a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5b9061224a565b8015610fa85780601f10610f7d57610100808354040283529160200191610fa8565b820191906000526020600020905b815481529060010190602001808311610f8b57829003601f168201915b505050505090506000610fb96111cc565b9050805160001415610fcd5750905061040d565b815115610fff578082604051602001610fe7929190611b22565b6040516020818303038152906040529250505061040d565b610dc1846111db565b6107f682826040518060200160405280600081525061125e565b61102b82610b82565b6110475760405162461bcd60e51b81526004016104cb90611f1a565b6000828152600b60209081526040909120825161052a92840190611742565b60006001600160e01b031982166380ac58cd60e01b148061109757506001600160e01b03198216635b5e139f60e01b145b8061040a575061040a82611291565b61052a8383836112aa565b60006110c5846001600160a01b0316611333565b156111c157836001600160a01b031663150b7a026110e1610cd2565b8786866040518563ffffffff1660e01b81526004016111039493929190611b65565b602060405180830381600087803b15801561111d57600080fd5b505af192505050801561114d575060408051601f3d908101601f1916820190925261114a91810190611a52565b60015b6111a7573d80801561117b576040519150601f19603f3d011682016040523d82523d6000602084013e611180565b606091505b50805161119f5760405162461bcd60e51b81526004016104cb90611c24565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610dc1565b506001949350505050565b6060601080546104219061224a565b60606111e682610b82565b6112025760405162461bcd60e51b81526004016104cb9061206f565b600061120c6111cc565b9050600081511161122c5760405180602001604052806000815250611257565b8061123684611342565b604051602001611247929190611b22565b6040516020818303038152906040525b9392505050565b611268838361145d565b61127560008484846110b1565b61052a5760405162461bcd60e51b81526004016104cb90611c24565b6001600160e01b031981166301ffc9a760e01b14919050565b6112b583838361052a565b6001600160a01b0383166112d1576112cc81611544565b6112f4565b816001600160a01b0316836001600160a01b0316146112f4576112f48382611588565b6001600160a01b0382166113105761130b81611625565b61052a565b826001600160a01b0316826001600160a01b03161461052a5761052a82826116fe565b6001600160a01b03163b151590565b60608161136757506040805180820190915260018152600360fc1b602082015261040d565b8160005b8115611391578061137b81612285565b915061138a9050600a836121d4565b915061136b565b60008167ffffffffffffffff8111156113ba57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156113e4576020820181803683370190505b5090505b8415610dc1576113f9600183612207565b9150611406600a866122a0565b6114119060306121bc565b60f81b81838151811061143457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611456600a866121d4565b94506113e8565b6001600160a01b0382166114835760405162461bcd60e51b81526004016104cb90611f68565b61148c81610b82565b156114a95760405162461bcd60e51b81526004016104cb90611d2c565b6114b5600083836110a6565b6001600160a01b03821660009081526004602052604081208054600192906114de9084906121bc565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46107f66000838361052a565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b6000600161159584610735565b61159f9190612207565b6000838152600860205260409020549091508082146115f2576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061163790600190612207565b6000838152600a60205260408120546009805493945090928490811061166d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806009838154811061169c57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600a909152604080822084905585825281205560098054806116e257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061170983610735565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b82805461174e9061224a565b90600052602060002090601f01602090048101928261177057600085556117b6565b82601f1061178957805160ff19168380011785556117b6565b828001600101855582156117b6579182015b828111156117b657825182559160200191906001019061179b565b506117c29291506117c6565b5090565b5b808211156117c257600081556001016117c7565b600067ffffffffffffffff808411156117f6576117f66122e0565b604051601f8501601f19908116603f0116810190828211818310171561181e5761181e6122e0565b8160405280935085815286868601111561183757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461040d57600080fd5b600082601f830112611878578081fd5b611257838335602085016117db565b600060208284031215611898578081fd5b61125782611851565b600080604083850312156118b3578081fd5b6118bc83611851565b91506118ca60208401611851565b90509250929050565b6000806000606084860312156118e7578081fd5b6118f084611851565b92506118fe60208501611851565b9150604084013590509250925092565b60008060008060808587031215611923578081fd5b61192c85611851565b935061193a60208601611851565b925060408501359150606085013567ffffffffffffffff81111561195c578182fd5b8501601f8101871361196c578182fd5b61197b878235602084016117db565b91505092959194509250565b60008060408385031215611999578182fd5b6119a283611851565b9150602083013580151581146119b6578182fd5b809150509250929050565b600080604083850312156119d3578182fd5b6119dc83611851565b9150602083013567ffffffffffffffff8111156119f7578182fd5b611a0385828601611868565b9150509250929050565b60008060408385031215611a1f578182fd5b611a2883611851565b946020939093013593505050565b600060208284031215611a47578081fd5b8135611257816122f6565b600060208284031215611a63578081fd5b8151611257816122f6565b600060208284031215611a7f578081fd5b813567ffffffffffffffff811115611a95578182fd5b610dc184828501611868565b600060208284031215611ab2578081fd5b5035919050565b60008060408385031215611acb578182fd5b50508035926020909101359150565b60008151808452611af281602086016020860161221e565b601f01601f19169290920160200192915050565b60008251611b1881846020870161221e565b9190910192915050565b60008351611b3481846020880161221e565b835190830190611b4881836020880161221e565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b9890830184611ada565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082526112576020830184611ada565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b602080825260119082015270105b1b081d1bdad95b9cc81b5a5b9d1959607a1b604082015260600190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60408201526d32bc34b9ba32b73a103a37b5b2b760911b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f72206040820152703737b732bc34b9ba32b73a103a37b5b2b760791b606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600082198211156121cf576121cf6122b4565b500190565b6000826121e3576121e36122ca565b500490565b6000816000190483118215151615612202576122026122b4565b500290565b600082821015612219576122196122b4565b500390565b60005b83811015612239578181015183820152602001612221565b838111156109515750506000910152565b60028104600182168061225e57607f821691505b6020821081141561227f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612299576122996122b4565b5060010190565b6000826122af576122af6122ca565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610b2657600080fdfea26469706673582212209d0588fad362f9af2d445ef5edcb3ce135805e22de84ebf2961d401b9c8ff0af64736f6c63430008010033a2646970667358221220552b862256c6f1ba0f8d1621d1d9a74185fabd3697939c14dc814c91be17f07e64736f6c63430008010033",
}

// MetaMasterABI is the input ABI used to generate the binding from.
// Deprecated: Use MetaMasterMetaData.ABI instead.
var MetaMasterABI = MetaMasterMetaData.ABI

// MetaMasterBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MetaMasterMetaData.Bin instead.
var MetaMasterBin = MetaMasterMetaData.Bin

// DeployMetaMaster deploys a new Ethereum contract, binding an instance of MetaMaster to it.
func DeployMetaMaster(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MetaMaster, error) {
	parsed, err := MetaMasterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MetaMasterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MetaMaster{MetaMasterCaller: MetaMasterCaller{contract: contract}, MetaMasterTransactor: MetaMasterTransactor{contract: contract}, MetaMasterFilterer: MetaMasterFilterer{contract: contract}}, nil
}

// MetaMaster is an auto generated Go binding around an Ethereum contract.
type MetaMaster struct {
	MetaMasterCaller     // Read-only binding to the contract
	MetaMasterTransactor // Write-only binding to the contract
	MetaMasterFilterer   // Log filterer for contract events
}

// MetaMasterCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetaMasterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaMasterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetaMasterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaMasterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetaMasterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaMasterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MetaMasterSession struct {
	Contract     *MetaMaster       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MetaMasterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MetaMasterCallerSession struct {
	Contract *MetaMasterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MetaMasterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MetaMasterTransactorSession struct {
	Contract     *MetaMasterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MetaMasterRaw is an auto generated low-level Go binding around an Ethereum contract.
type MetaMasterRaw struct {
	Contract *MetaMaster // Generic contract binding to access the raw methods on
}

// MetaMasterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MetaMasterCallerRaw struct {
	Contract *MetaMasterCaller // Generic read-only contract binding to access the raw methods on
}

// MetaMasterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MetaMasterTransactorRaw struct {
	Contract *MetaMasterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMetaMaster creates a new instance of MetaMaster, bound to a specific deployed contract.
func NewMetaMaster(address common.Address, backend bind.ContractBackend) (*MetaMaster, error) {
	contract, err := bindMetaMaster(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MetaMaster{MetaMasterCaller: MetaMasterCaller{contract: contract}, MetaMasterTransactor: MetaMasterTransactor{contract: contract}, MetaMasterFilterer: MetaMasterFilterer{contract: contract}}, nil
}

// NewMetaMasterCaller creates a new read-only instance of MetaMaster, bound to a specific deployed contract.
func NewMetaMasterCaller(address common.Address, caller bind.ContractCaller) (*MetaMasterCaller, error) {
	contract, err := bindMetaMaster(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetaMasterCaller{contract: contract}, nil
}

// NewMetaMasterTransactor creates a new write-only instance of MetaMaster, bound to a specific deployed contract.
func NewMetaMasterTransactor(address common.Address, transactor bind.ContractTransactor) (*MetaMasterTransactor, error) {
	contract, err := bindMetaMaster(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetaMasterTransactor{contract: contract}, nil
}

// NewMetaMasterFilterer creates a new log filterer instance of MetaMaster, bound to a specific deployed contract.
func NewMetaMasterFilterer(address common.Address, filterer bind.ContractFilterer) (*MetaMasterFilterer, error) {
	contract, err := bindMetaMaster(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetaMasterFilterer{contract: contract}, nil
}

// bindMetaMaster binds a generic wrapper to an already deployed contract.
func bindMetaMaster(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MetaMasterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaMaster *MetaMasterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MetaMaster.Contract.MetaMasterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaMaster *MetaMasterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaMaster.Contract.MetaMasterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaMaster *MetaMasterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaMaster.Contract.MetaMasterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaMaster *MetaMasterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MetaMaster.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaMaster *MetaMasterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaMaster.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaMaster *MetaMasterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaMaster.Contract.contract.Transact(opts, method, params...)
}

// CollectionOwner is a free data retrieval call binding the contract method 0xc543e0fe.
//
// Solidity: function collectionOwner(address ) view returns(address)
func (_MetaMaster *MetaMasterCaller) CollectionOwner(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "collectionOwner", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CollectionOwner is a free data retrieval call binding the contract method 0xc543e0fe.
//
// Solidity: function collectionOwner(address ) view returns(address)
func (_MetaMaster *MetaMasterSession) CollectionOwner(arg0 common.Address) (common.Address, error) {
	return _MetaMaster.Contract.CollectionOwner(&_MetaMaster.CallOpts, arg0)
}

// CollectionOwner is a free data retrieval call binding the contract method 0xc543e0fe.
//
// Solidity: function collectionOwner(address ) view returns(address)
func (_MetaMaster *MetaMasterCallerSession) CollectionOwner(arg0 common.Address) (common.Address, error) {
	return _MetaMaster.Contract.CollectionOwner(&_MetaMaster.CallOpts, arg0)
}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_MetaMaster *MetaMasterCaller) FeeCollector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "feeCollector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_MetaMaster *MetaMasterSession) FeeCollector() (common.Address, error) {
	return _MetaMaster.Contract.FeeCollector(&_MetaMaster.CallOpts)
}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_MetaMaster *MetaMasterCallerSession) FeeCollector() (common.Address, error) {
	return _MetaMaster.Contract.FeeCollector(&_MetaMaster.CallOpts)
}

// FeeInBips is a free data retrieval call binding the contract method 0x0e716d97.
//
// Solidity: function feeInBips() view returns(uint256)
func (_MetaMaster *MetaMasterCaller) FeeInBips(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "feeInBips")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeInBips is a free data retrieval call binding the contract method 0x0e716d97.
//
// Solidity: function feeInBips() view returns(uint256)
func (_MetaMaster *MetaMasterSession) FeeInBips() (*big.Int, error) {
	return _MetaMaster.Contract.FeeInBips(&_MetaMaster.CallOpts)
}

// FeeInBips is a free data retrieval call binding the contract method 0x0e716d97.
//
// Solidity: function feeInBips() view returns(uint256)
func (_MetaMaster *MetaMasterCallerSession) FeeInBips() (*big.Int, error) {
	return _MetaMaster.Contract.FeeInBips(&_MetaMaster.CallOpts)
}

// GetSaleInfo is a free data retrieval call binding the contract method 0xffff0d11.
//
// Solidity: function getSaleInfo(address collection, uint96 token_id) view returns((address,address,uint96,address,uint128,uint64,address))
func (_MetaMaster *MetaMasterCaller) GetSaleInfo(opts *bind.CallOpts, collection common.Address, token_id *big.Int) (NFTInfoStoragesalesInfo, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getSaleInfo", collection, token_id)

	if err != nil {
		return *new(NFTInfoStoragesalesInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(NFTInfoStoragesalesInfo)).(*NFTInfoStoragesalesInfo)

	return out0, err

}

// GetSaleInfo is a free data retrieval call binding the contract method 0xffff0d11.
//
// Solidity: function getSaleInfo(address collection, uint96 token_id) view returns((address,address,uint96,address,uint128,uint64,address))
func (_MetaMaster *MetaMasterSession) GetSaleInfo(collection common.Address, token_id *big.Int) (NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSaleInfo(&_MetaMaster.CallOpts, collection, token_id)
}

// GetSaleInfo is a free data retrieval call binding the contract method 0xffff0d11.
//
// Solidity: function getSaleInfo(address collection, uint96 token_id) view returns((address,address,uint96,address,uint128,uint64,address))
func (_MetaMaster *MetaMasterCallerSession) GetSaleInfo(collection common.Address, token_id *big.Int) (NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSaleInfo(&_MetaMaster.CallOpts, collection, token_id)
}

// GetSales is a free data retrieval call binding the contract method 0x1a927779.
//
// Solidity: function getSales(uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCaller) GetSales(opts *bind.CallOpts, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getSales", limit, offset)

	if err != nil {
		return *new([]NFTInfoStoragesalesInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]NFTInfoStoragesalesInfo)).(*[]NFTInfoStoragesalesInfo)

	return out0, err

}

// GetSales is a free data retrieval call binding the contract method 0x1a927779.
//
// Solidity: function getSales(uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterSession) GetSales(limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSales(&_MetaMaster.CallOpts, limit, offset)
}

// GetSales is a free data retrieval call binding the contract method 0x1a927779.
//
// Solidity: function getSales(uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCallerSession) GetSales(limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSales(&_MetaMaster.CallOpts, limit, offset)
}

// GetSalesByCollection is a free data retrieval call binding the contract method 0x2c32b2d6.
//
// Solidity: function getSalesByCollection(address collcetion, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCaller) GetSalesByCollection(opts *bind.CallOpts, collcetion common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getSalesByCollection", collcetion, limit, offset)

	if err != nil {
		return *new([]NFTInfoStoragesalesInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]NFTInfoStoragesalesInfo)).(*[]NFTInfoStoragesalesInfo)

	return out0, err

}

// GetSalesByCollection is a free data retrieval call binding the contract method 0x2c32b2d6.
//
// Solidity: function getSalesByCollection(address collcetion, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterSession) GetSalesByCollection(collcetion common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSalesByCollection(&_MetaMaster.CallOpts, collcetion, limit, offset)
}

// GetSalesByCollection is a free data retrieval call binding the contract method 0x2c32b2d6.
//
// Solidity: function getSalesByCollection(address collcetion, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCallerSession) GetSalesByCollection(collcetion common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSalesByCollection(&_MetaMaster.CallOpts, collcetion, limit, offset)
}

// GetSalesByUser is a free data retrieval call binding the contract method 0x15412a96.
//
// Solidity: function getSalesByUser(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCaller) GetSalesByUser(opts *bind.CallOpts, user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getSalesByUser", user, limit, offset)

	if err != nil {
		return *new([]NFTInfoStoragesalesInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]NFTInfoStoragesalesInfo)).(*[]NFTInfoStoragesalesInfo)

	return out0, err

}

// GetSalesByUser is a free data retrieval call binding the contract method 0x15412a96.
//
// Solidity: function getSalesByUser(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterSession) GetSalesByUser(user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSalesByUser(&_MetaMaster.CallOpts, user, limit, offset)
}

// GetSalesByUser is a free data retrieval call binding the contract method 0x15412a96.
//
// Solidity: function getSalesByUser(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCallerSession) GetSalesByUser(user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetSalesByUser(&_MetaMaster.CallOpts, user, limit, offset)
}

// GetSalesCount is a free data retrieval call binding the contract method 0xdd8027db.
//
// Solidity: function getSalesCount() view returns(uint256)
func (_MetaMaster *MetaMasterCaller) GetSalesCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getSalesCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSalesCount is a free data retrieval call binding the contract method 0xdd8027db.
//
// Solidity: function getSalesCount() view returns(uint256)
func (_MetaMaster *MetaMasterSession) GetSalesCount() (*big.Int, error) {
	return _MetaMaster.Contract.GetSalesCount(&_MetaMaster.CallOpts)
}

// GetSalesCount is a free data retrieval call binding the contract method 0xdd8027db.
//
// Solidity: function getSalesCount() view returns(uint256)
func (_MetaMaster *MetaMasterCallerSession) GetSalesCount() (*big.Int, error) {
	return _MetaMaster.Contract.GetSalesCount(&_MetaMaster.CallOpts)
}

// GetSalesCountByUser is a free data retrieval call binding the contract method 0xe782fae7.
//
// Solidity: function getSalesCountByUser(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCaller) GetSalesCountByUser(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getSalesCountByUser", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSalesCountByUser is a free data retrieval call binding the contract method 0xe782fae7.
//
// Solidity: function getSalesCountByUser(address user) view returns(uint256)
func (_MetaMaster *MetaMasterSession) GetSalesCountByUser(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.GetSalesCountByUser(&_MetaMaster.CallOpts, user)
}

// GetSalesCountByUser is a free data retrieval call binding the contract method 0xe782fae7.
//
// Solidity: function getSalesCountByUser(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCallerSession) GetSalesCountByUser(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.GetSalesCountByUser(&_MetaMaster.CallOpts, user)
}

// GetUserBids is a free data retrieval call binding the contract method 0xb78fd5b3.
//
// Solidity: function getUserBids(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCaller) GetUserBids(opts *bind.CallOpts, user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getUserBids", user, limit, offset)

	if err != nil {
		return *new([]NFTInfoStoragesalesInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]NFTInfoStoragesalesInfo)).(*[]NFTInfoStoragesalesInfo)

	return out0, err

}

// GetUserBids is a free data retrieval call binding the contract method 0xb78fd5b3.
//
// Solidity: function getUserBids(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterSession) GetUserBids(user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetUserBids(&_MetaMaster.CallOpts, user, limit, offset)
}

// GetUserBids is a free data retrieval call binding the contract method 0xb78fd5b3.
//
// Solidity: function getUserBids(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCallerSession) GetUserBids(user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetUserBids(&_MetaMaster.CallOpts, user, limit, offset)
}

// GetUserBidsCount is a free data retrieval call binding the contract method 0x52374f6f.
//
// Solidity: function getUserBidsCount(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCaller) GetUserBidsCount(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getUserBidsCount", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserBidsCount is a free data retrieval call binding the contract method 0x52374f6f.
//
// Solidity: function getUserBidsCount(address user) view returns(uint256)
func (_MetaMaster *MetaMasterSession) GetUserBidsCount(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.GetUserBidsCount(&_MetaMaster.CallOpts, user)
}

// GetUserBidsCount is a free data retrieval call binding the contract method 0x52374f6f.
//
// Solidity: function getUserBidsCount(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCallerSession) GetUserBidsCount(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.GetUserBidsCount(&_MetaMaster.CallOpts, user)
}

// GetUserBuys is a free data retrieval call binding the contract method 0x83651255.
//
// Solidity: function getUserBuys(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCaller) GetUserBuys(opts *bind.CallOpts, user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getUserBuys", user, limit, offset)

	if err != nil {
		return *new([]NFTInfoStoragesalesInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]NFTInfoStoragesalesInfo)).(*[]NFTInfoStoragesalesInfo)

	return out0, err

}

// GetUserBuys is a free data retrieval call binding the contract method 0x83651255.
//
// Solidity: function getUserBuys(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterSession) GetUserBuys(user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetUserBuys(&_MetaMaster.CallOpts, user, limit, offset)
}

// GetUserBuys is a free data retrieval call binding the contract method 0x83651255.
//
// Solidity: function getUserBuys(address user, uint256 limit, uint256 offset) view returns((address,address,uint96,address,uint128,uint64,address)[] records)
func (_MetaMaster *MetaMasterCallerSession) GetUserBuys(user common.Address, limit *big.Int, offset *big.Int) ([]NFTInfoStoragesalesInfo, error) {
	return _MetaMaster.Contract.GetUserBuys(&_MetaMaster.CallOpts, user, limit, offset)
}

// GetUserBuysCount is a free data retrieval call binding the contract method 0x2b171c71.
//
// Solidity: function getUserBuysCount(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCaller) GetUserBuysCount(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "getUserBuysCount", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserBuysCount is a free data retrieval call binding the contract method 0x2b171c71.
//
// Solidity: function getUserBuysCount(address user) view returns(uint256)
func (_MetaMaster *MetaMasterSession) GetUserBuysCount(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.GetUserBuysCount(&_MetaMaster.CallOpts, user)
}

// GetUserBuysCount is a free data retrieval call binding the contract method 0x2b171c71.
//
// Solidity: function getUserBuysCount(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCallerSession) GetUserBuysCount(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.GetUserBuysCount(&_MetaMaster.CallOpts, user)
}

// MarketSales is a free data retrieval call binding the contract method 0x807421f1.
//
// Solidity: function marketSales(uint256 ) view returns(address)
func (_MetaMaster *MetaMasterCaller) MarketSales(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "marketSales", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketSales is a free data retrieval call binding the contract method 0x807421f1.
//
// Solidity: function marketSales(uint256 ) view returns(address)
func (_MetaMaster *MetaMasterSession) MarketSales(arg0 *big.Int) (common.Address, error) {
	return _MetaMaster.Contract.MarketSales(&_MetaMaster.CallOpts, arg0)
}

// MarketSales is a free data retrieval call binding the contract method 0x807421f1.
//
// Solidity: function marketSales(uint256 ) view returns(address)
func (_MetaMaster *MetaMasterCallerSession) MarketSales(arg0 *big.Int) (common.Address, error) {
	return _MetaMaster.Contract.MarketSales(&_MetaMaster.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MetaMaster *MetaMasterCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MetaMaster *MetaMasterSession) Owner() (common.Address, error) {
	return _MetaMaster.Contract.Owner(&_MetaMaster.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MetaMaster *MetaMasterCallerSession) Owner() (common.Address, error) {
	return _MetaMaster.Contract.Owner(&_MetaMaster.CallOpts)
}

// TokenIsSupported is a free data retrieval call binding the contract method 0xe7061950.
//
// Solidity: function tokenIsSupported(address ) view returns(bool)
func (_MetaMaster *MetaMasterCaller) TokenIsSupported(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "tokenIsSupported", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TokenIsSupported is a free data retrieval call binding the contract method 0xe7061950.
//
// Solidity: function tokenIsSupported(address ) view returns(bool)
func (_MetaMaster *MetaMasterSession) TokenIsSupported(arg0 common.Address) (bool, error) {
	return _MetaMaster.Contract.TokenIsSupported(&_MetaMaster.CallOpts, arg0)
}

// TokenIsSupported is a free data retrieval call binding the contract method 0xe7061950.
//
// Solidity: function tokenIsSupported(address ) view returns(bool)
func (_MetaMaster *MetaMasterCallerSession) TokenIsSupported(arg0 common.Address) (bool, error) {
	return _MetaMaster.Contract.TokenIsSupported(&_MetaMaster.CallOpts, arg0)
}

// UserOwnedCollectionNum is a free data retrieval call binding the contract method 0x28044ef9.
//
// Solidity: function userOwnedCollectionNum(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCaller) UserOwnedCollectionNum(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "userOwnedCollectionNum", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserOwnedCollectionNum is a free data retrieval call binding the contract method 0x28044ef9.
//
// Solidity: function userOwnedCollectionNum(address user) view returns(uint256)
func (_MetaMaster *MetaMasterSession) UserOwnedCollectionNum(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.UserOwnedCollectionNum(&_MetaMaster.CallOpts, user)
}

// UserOwnedCollectionNum is a free data retrieval call binding the contract method 0x28044ef9.
//
// Solidity: function userOwnedCollectionNum(address user) view returns(uint256)
func (_MetaMaster *MetaMasterCallerSession) UserOwnedCollectionNum(user common.Address) (*big.Int, error) {
	return _MetaMaster.Contract.UserOwnedCollectionNum(&_MetaMaster.CallOpts, user)
}

// UserOwnedCollections is a free data retrieval call binding the contract method 0x712811be.
//
// Solidity: function userOwnedCollections(address , uint256 ) view returns(address)
func (_MetaMaster *MetaMasterCaller) UserOwnedCollections(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MetaMaster.contract.Call(opts, &out, "userOwnedCollections", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UserOwnedCollections is a free data retrieval call binding the contract method 0x712811be.
//
// Solidity: function userOwnedCollections(address , uint256 ) view returns(address)
func (_MetaMaster *MetaMasterSession) UserOwnedCollections(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MetaMaster.Contract.UserOwnedCollections(&_MetaMaster.CallOpts, arg0, arg1)
}

// UserOwnedCollections is a free data retrieval call binding the contract method 0x712811be.
//
// Solidity: function userOwnedCollections(address , uint256 ) view returns(address)
func (_MetaMaster *MetaMasterCallerSession) UserOwnedCollections(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MetaMaster.Contract.UserOwnedCollections(&_MetaMaster.CallOpts, arg0, arg1)
}

// AddMarketSale is a paid mutator transaction binding the contract method 0xb22eb9ba.
//
// Solidity: function addMarketSale(address _sale) returns()
func (_MetaMaster *MetaMasterTransactor) AddMarketSale(opts *bind.TransactOpts, _sale common.Address) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "addMarketSale", _sale)
}

// AddMarketSale is a paid mutator transaction binding the contract method 0xb22eb9ba.
//
// Solidity: function addMarketSale(address _sale) returns()
func (_MetaMaster *MetaMasterSession) AddMarketSale(_sale common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.AddMarketSale(&_MetaMaster.TransactOpts, _sale)
}

// AddMarketSale is a paid mutator transaction binding the contract method 0xb22eb9ba.
//
// Solidity: function addMarketSale(address _sale) returns()
func (_MetaMaster *MetaMasterTransactorSession) AddMarketSale(_sale common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.AddMarketSale(&_MetaMaster.TransactOpts, _sale)
}

// CreateCollection is a paid mutator transaction binding the contract method 0xfa4c21fe.
//
// Solidity: function createCollection(string _name, string _symbol, string _baseURI, uint256 _max_supply, string _metaInfo, address royaltiesReceiver, uint256 royaltiesPercentageInBips) returns(address)
func (_MetaMaster *MetaMasterTransactor) CreateCollection(opts *bind.TransactOpts, _name string, _symbol string, _baseURI string, _max_supply *big.Int, _metaInfo string, royaltiesReceiver common.Address, royaltiesPercentageInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "createCollection", _name, _symbol, _baseURI, _max_supply, _metaInfo, royaltiesReceiver, royaltiesPercentageInBips)
}

// CreateCollection is a paid mutator transaction binding the contract method 0xfa4c21fe.
//
// Solidity: function createCollection(string _name, string _symbol, string _baseURI, uint256 _max_supply, string _metaInfo, address royaltiesReceiver, uint256 royaltiesPercentageInBips) returns(address)
func (_MetaMaster *MetaMasterSession) CreateCollection(_name string, _symbol string, _baseURI string, _max_supply *big.Int, _metaInfo string, royaltiesReceiver common.Address, royaltiesPercentageInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.CreateCollection(&_MetaMaster.TransactOpts, _name, _symbol, _baseURI, _max_supply, _metaInfo, royaltiesReceiver, royaltiesPercentageInBips)
}

// CreateCollection is a paid mutator transaction binding the contract method 0xfa4c21fe.
//
// Solidity: function createCollection(string _name, string _symbol, string _baseURI, uint256 _max_supply, string _metaInfo, address royaltiesReceiver, uint256 royaltiesPercentageInBips) returns(address)
func (_MetaMaster *MetaMasterTransactorSession) CreateCollection(_name string, _symbol string, _baseURI string, _max_supply *big.Int, _metaInfo string, royaltiesReceiver common.Address, royaltiesPercentageInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.CreateCollection(&_MetaMaster.TransactOpts, _name, _symbol, _baseURI, _max_supply, _metaInfo, royaltiesReceiver, royaltiesPercentageInBips)
}

// Mint is a paid mutator transaction binding the contract method 0x221375a6.
//
// Solidity: function mint(address _collection, address _recipient, string _hash) returns(uint256)
func (_MetaMaster *MetaMasterTransactor) Mint(opts *bind.TransactOpts, _collection common.Address, _recipient common.Address, _hash string) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "mint", _collection, _recipient, _hash)
}

// Mint is a paid mutator transaction binding the contract method 0x221375a6.
//
// Solidity: function mint(address _collection, address _recipient, string _hash) returns(uint256)
func (_MetaMaster *MetaMasterSession) Mint(_collection common.Address, _recipient common.Address, _hash string) (*types.Transaction, error) {
	return _MetaMaster.Contract.Mint(&_MetaMaster.TransactOpts, _collection, _recipient, _hash)
}

// Mint is a paid mutator transaction binding the contract method 0x221375a6.
//
// Solidity: function mint(address _collection, address _recipient, string _hash) returns(uint256)
func (_MetaMaster *MetaMasterTransactorSession) Mint(_collection common.Address, _recipient common.Address, _hash string) (*types.Transaction, error) {
	return _MetaMaster.Contract.Mint(&_MetaMaster.TransactOpts, _collection, _recipient, _hash)
}

// MintAndSell is a paid mutator transaction binding the contract method 0x63a24e22.
//
// Solidity: function mintAndSell(address _collection, string _hash, uint256 market, address _token, uint256 _price, uint256 _due) returns()
func (_MetaMaster *MetaMasterTransactor) MintAndSell(opts *bind.TransactOpts, _collection common.Address, _hash string, market *big.Int, _token common.Address, _price *big.Int, _due *big.Int) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "mintAndSell", _collection, _hash, market, _token, _price, _due)
}

// MintAndSell is a paid mutator transaction binding the contract method 0x63a24e22.
//
// Solidity: function mintAndSell(address _collection, string _hash, uint256 market, address _token, uint256 _price, uint256 _due) returns()
func (_MetaMaster *MetaMasterSession) MintAndSell(_collection common.Address, _hash string, market *big.Int, _token common.Address, _price *big.Int, _due *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.MintAndSell(&_MetaMaster.TransactOpts, _collection, _hash, market, _token, _price, _due)
}

// MintAndSell is a paid mutator transaction binding the contract method 0x63a24e22.
//
// Solidity: function mintAndSell(address _collection, string _hash, uint256 market, address _token, uint256 _price, uint256 _due) returns()
func (_MetaMaster *MetaMasterTransactorSession) MintAndSell(_collection common.Address, _hash string, market *big.Int, _token common.Address, _price *big.Int, _due *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.MintAndSell(&_MetaMaster.TransactOpts, _collection, _hash, market, _token, _price, _due)
}

// RecordDelBid is a paid mutator transaction binding the contract method 0xcdfde4e4.
//
// Solidity: function recordDelBid(uint256 record, address bidder) returns()
func (_MetaMaster *MetaMasterTransactor) RecordDelBid(opts *bind.TransactOpts, record *big.Int, bidder common.Address) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "recordDelBid", record, bidder)
}

// RecordDelBid is a paid mutator transaction binding the contract method 0xcdfde4e4.
//
// Solidity: function recordDelBid(uint256 record, address bidder) returns()
func (_MetaMaster *MetaMasterSession) RecordDelBid(record *big.Int, bidder common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordDelBid(&_MetaMaster.TransactOpts, record, bidder)
}

// RecordDelBid is a paid mutator transaction binding the contract method 0xcdfde4e4.
//
// Solidity: function recordDelBid(uint256 record, address bidder) returns()
func (_MetaMaster *MetaMasterTransactorSession) RecordDelBid(record *big.Int, bidder common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordDelBid(&_MetaMaster.TransactOpts, record, bidder)
}

// RecordItemCancel is a paid mutator transaction binding the contract method 0x41084242.
//
// Solidity: function recordItemCancel(uint256 record, address seller) returns()
func (_MetaMaster *MetaMasterTransactor) RecordItemCancel(opts *bind.TransactOpts, record *big.Int, seller common.Address) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "recordItemCancel", record, seller)
}

// RecordItemCancel is a paid mutator transaction binding the contract method 0x41084242.
//
// Solidity: function recordItemCancel(uint256 record, address seller) returns()
func (_MetaMaster *MetaMasterSession) RecordItemCancel(record *big.Int, seller common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordItemCancel(&_MetaMaster.TransactOpts, record, seller)
}

// RecordItemCancel is a paid mutator transaction binding the contract method 0x41084242.
//
// Solidity: function recordItemCancel(uint256 record, address seller) returns()
func (_MetaMaster *MetaMasterTransactorSession) RecordItemCancel(record *big.Int, seller common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordItemCancel(&_MetaMaster.TransactOpts, record, seller)
}

// RecordItemSold is a paid mutator transaction binding the contract method 0x46eb67ef.
//
// Solidity: function recordItemSold(uint256 record, address seller, address buyer, address token, uint256 price) returns()
func (_MetaMaster *MetaMasterTransactor) RecordItemSold(opts *bind.TransactOpts, record *big.Int, seller common.Address, buyer common.Address, token common.Address, price *big.Int) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "recordItemSold", record, seller, buyer, token, price)
}

// RecordItemSold is a paid mutator transaction binding the contract method 0x46eb67ef.
//
// Solidity: function recordItemSold(uint256 record, address seller, address buyer, address token, uint256 price) returns()
func (_MetaMaster *MetaMasterSession) RecordItemSold(record *big.Int, seller common.Address, buyer common.Address, token common.Address, price *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordItemSold(&_MetaMaster.TransactOpts, record, seller, buyer, token, price)
}

// RecordItemSold is a paid mutator transaction binding the contract method 0x46eb67ef.
//
// Solidity: function recordItemSold(uint256 record, address seller, address buyer, address token, uint256 price) returns()
func (_MetaMaster *MetaMasterTransactorSession) RecordItemSold(record *big.Int, seller common.Address, buyer common.Address, token common.Address, price *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordItemSold(&_MetaMaster.TransactOpts, record, seller, buyer, token, price)
}

// RecordNewBid is a paid mutator transaction binding the contract method 0x2feeab36.
//
// Solidity: function recordNewBid(uint256 record, address bidder) returns()
func (_MetaMaster *MetaMasterTransactor) RecordNewBid(opts *bind.TransactOpts, record *big.Int, bidder common.Address) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "recordNewBid", record, bidder)
}

// RecordNewBid is a paid mutator transaction binding the contract method 0x2feeab36.
//
// Solidity: function recordNewBid(uint256 record, address bidder) returns()
func (_MetaMaster *MetaMasterSession) RecordNewBid(record *big.Int, bidder common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordNewBid(&_MetaMaster.TransactOpts, record, bidder)
}

// RecordNewBid is a paid mutator transaction binding the contract method 0x2feeab36.
//
// Solidity: function recordNewBid(uint256 record, address bidder) returns()
func (_MetaMaster *MetaMasterTransactorSession) RecordNewBid(record *big.Int, bidder common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordNewBid(&_MetaMaster.TransactOpts, record, bidder)
}

// RecordNewItem is a paid mutator transaction binding the contract method 0x08d3fed3.
//
// Solidity: function recordNewItem(uint256 record, address seller) returns()
func (_MetaMaster *MetaMasterTransactor) RecordNewItem(opts *bind.TransactOpts, record *big.Int, seller common.Address) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "recordNewItem", record, seller)
}

// RecordNewItem is a paid mutator transaction binding the contract method 0x08d3fed3.
//
// Solidity: function recordNewItem(uint256 record, address seller) returns()
func (_MetaMaster *MetaMasterSession) RecordNewItem(record *big.Int, seller common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordNewItem(&_MetaMaster.TransactOpts, record, seller)
}

// RecordNewItem is a paid mutator transaction binding the contract method 0x08d3fed3.
//
// Solidity: function recordNewItem(uint256 record, address seller) returns()
func (_MetaMaster *MetaMasterTransactorSession) RecordNewItem(record *big.Int, seller common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.RecordNewItem(&_MetaMaster.TransactOpts, record, seller)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MetaMaster *MetaMasterTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MetaMaster *MetaMasterSession) RenounceOwnership() (*types.Transaction, error) {
	return _MetaMaster.Contract.RenounceOwnership(&_MetaMaster.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MetaMaster *MetaMasterTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MetaMaster.Contract.RenounceOwnership(&_MetaMaster.TransactOpts)
}

// Sell is a paid mutator transaction binding the contract method 0xd7bb5522.
//
// Solidity: function sell(address collection, uint256 token_id, uint256 market, address _token, uint256 _price, uint256 _due) returns()
func (_MetaMaster *MetaMasterTransactor) Sell(opts *bind.TransactOpts, collection common.Address, token_id *big.Int, market *big.Int, _token common.Address, _price *big.Int, _due *big.Int) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "sell", collection, token_id, market, _token, _price, _due)
}

// Sell is a paid mutator transaction binding the contract method 0xd7bb5522.
//
// Solidity: function sell(address collection, uint256 token_id, uint256 market, address _token, uint256 _price, uint256 _due) returns()
func (_MetaMaster *MetaMasterSession) Sell(collection common.Address, token_id *big.Int, market *big.Int, _token common.Address, _price *big.Int, _due *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.Sell(&_MetaMaster.TransactOpts, collection, token_id, market, _token, _price, _due)
}

// Sell is a paid mutator transaction binding the contract method 0xd7bb5522.
//
// Solidity: function sell(address collection, uint256 token_id, uint256 market, address _token, uint256 _price, uint256 _due) returns()
func (_MetaMaster *MetaMasterTransactorSession) Sell(collection common.Address, token_id *big.Int, market *big.Int, _token common.Address, _price *big.Int, _due *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.Sell(&_MetaMaster.TransactOpts, collection, token_id, market, _token, _price, _due)
}

// SetCollectionMetaInfo is a paid mutator transaction binding the contract method 0xa2499201.
//
// Solidity: function setCollectionMetaInfo(address _collection, string _metaInfo) returns()
func (_MetaMaster *MetaMasterTransactor) SetCollectionMetaInfo(opts *bind.TransactOpts, _collection common.Address, _metaInfo string) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "setCollectionMetaInfo", _collection, _metaInfo)
}

// SetCollectionMetaInfo is a paid mutator transaction binding the contract method 0xa2499201.
//
// Solidity: function setCollectionMetaInfo(address _collection, string _metaInfo) returns()
func (_MetaMaster *MetaMasterSession) SetCollectionMetaInfo(_collection common.Address, _metaInfo string) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetCollectionMetaInfo(&_MetaMaster.TransactOpts, _collection, _metaInfo)
}

// SetCollectionMetaInfo is a paid mutator transaction binding the contract method 0xa2499201.
//
// Solidity: function setCollectionMetaInfo(address _collection, string _metaInfo) returns()
func (_MetaMaster *MetaMasterTransactorSession) SetCollectionMetaInfo(_collection common.Address, _metaInfo string) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetCollectionMetaInfo(&_MetaMaster.TransactOpts, _collection, _metaInfo)
}

// SetCollectionRoyalty is a paid mutator transaction binding the contract method 0x65e84a20.
//
// Solidity: function setCollectionRoyalty(address _collection, address royaltiesReceiver, uint256 royaltiesPercentageInBips) returns()
func (_MetaMaster *MetaMasterTransactor) SetCollectionRoyalty(opts *bind.TransactOpts, _collection common.Address, royaltiesReceiver common.Address, royaltiesPercentageInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "setCollectionRoyalty", _collection, royaltiesReceiver, royaltiesPercentageInBips)
}

// SetCollectionRoyalty is a paid mutator transaction binding the contract method 0x65e84a20.
//
// Solidity: function setCollectionRoyalty(address _collection, address royaltiesReceiver, uint256 royaltiesPercentageInBips) returns()
func (_MetaMaster *MetaMasterSession) SetCollectionRoyalty(_collection common.Address, royaltiesReceiver common.Address, royaltiesPercentageInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetCollectionRoyalty(&_MetaMaster.TransactOpts, _collection, royaltiesReceiver, royaltiesPercentageInBips)
}

// SetCollectionRoyalty is a paid mutator transaction binding the contract method 0x65e84a20.
//
// Solidity: function setCollectionRoyalty(address _collection, address royaltiesReceiver, uint256 royaltiesPercentageInBips) returns()
func (_MetaMaster *MetaMasterTransactorSession) SetCollectionRoyalty(_collection common.Address, royaltiesReceiver common.Address, royaltiesPercentageInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetCollectionRoyalty(&_MetaMaster.TransactOpts, _collection, royaltiesReceiver, royaltiesPercentageInBips)
}

// SetFeeConfig is a paid mutator transaction binding the contract method 0xe07a3111.
//
// Solidity: function setFeeConfig(address _feeCollector, uint256 _feeInBips) returns()
func (_MetaMaster *MetaMasterTransactor) SetFeeConfig(opts *bind.TransactOpts, _feeCollector common.Address, _feeInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "setFeeConfig", _feeCollector, _feeInBips)
}

// SetFeeConfig is a paid mutator transaction binding the contract method 0xe07a3111.
//
// Solidity: function setFeeConfig(address _feeCollector, uint256 _feeInBips) returns()
func (_MetaMaster *MetaMasterSession) SetFeeConfig(_feeCollector common.Address, _feeInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetFeeConfig(&_MetaMaster.TransactOpts, _feeCollector, _feeInBips)
}

// SetFeeConfig is a paid mutator transaction binding the contract method 0xe07a3111.
//
// Solidity: function setFeeConfig(address _feeCollector, uint256 _feeInBips) returns()
func (_MetaMaster *MetaMasterTransactorSession) SetFeeConfig(_feeCollector common.Address, _feeInBips *big.Int) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetFeeConfig(&_MetaMaster.TransactOpts, _feeCollector, _feeInBips)
}

// SetTokenSupport is a paid mutator transaction binding the contract method 0x0c6a753f.
//
// Solidity: function setTokenSupport(address _token, bool _status) returns()
func (_MetaMaster *MetaMasterTransactor) SetTokenSupport(opts *bind.TransactOpts, _token common.Address, _status bool) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "setTokenSupport", _token, _status)
}

// SetTokenSupport is a paid mutator transaction binding the contract method 0x0c6a753f.
//
// Solidity: function setTokenSupport(address _token, bool _status) returns()
func (_MetaMaster *MetaMasterSession) SetTokenSupport(_token common.Address, _status bool) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetTokenSupport(&_MetaMaster.TransactOpts, _token, _status)
}

// SetTokenSupport is a paid mutator transaction binding the contract method 0x0c6a753f.
//
// Solidity: function setTokenSupport(address _token, bool _status) returns()
func (_MetaMaster *MetaMasterTransactorSession) SetTokenSupport(_token common.Address, _status bool) (*types.Transaction, error) {
	return _MetaMaster.Contract.SetTokenSupport(&_MetaMaster.TransactOpts, _token, _status)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaMaster *MetaMasterTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MetaMaster.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaMaster *MetaMasterSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.TransferOwnership(&_MetaMaster.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaMaster *MetaMasterTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaMaster.Contract.TransferOwnership(&_MetaMaster.TransactOpts, newOwner)
}

// MetaMasterNewCollectionIterator is returned from FilterNewCollection and is used to iterate over the raw logs and unpacked data for NewCollection events raised by the MetaMaster contract.
type MetaMasterNewCollectionIterator struct {
	Event *MetaMasterNewCollection // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetaMasterNewCollectionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetaMasterNewCollection)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetaMasterNewCollection)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetaMasterNewCollectionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetaMasterNewCollectionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetaMasterNewCollection represents a NewCollection event raised by the MetaMaster contract.
type MetaMasterNewCollection struct {
	Creator    common.Address
	Collection common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewCollection is a free log retrieval operation binding the contract event 0x5b84d9550adb7000df7bee717735ecd3af48ea3f66c6886d52e8227548fb228c.
//
// Solidity: event NewCollection(address indexed creator, address collection)
func (_MetaMaster *MetaMasterFilterer) FilterNewCollection(opts *bind.FilterOpts, creator []common.Address) (*MetaMasterNewCollectionIterator, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _MetaMaster.contract.FilterLogs(opts, "NewCollection", creatorRule)
	if err != nil {
		return nil, err
	}
	return &MetaMasterNewCollectionIterator{contract: _MetaMaster.contract, event: "NewCollection", logs: logs, sub: sub}, nil
}

// WatchNewCollection is a free log subscription operation binding the contract event 0x5b84d9550adb7000df7bee717735ecd3af48ea3f66c6886d52e8227548fb228c.
//
// Solidity: event NewCollection(address indexed creator, address collection)
func (_MetaMaster *MetaMasterFilterer) WatchNewCollection(opts *bind.WatchOpts, sink chan<- *MetaMasterNewCollection, creator []common.Address) (event.Subscription, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _MetaMaster.contract.WatchLogs(opts, "NewCollection", creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetaMasterNewCollection)
				if err := _MetaMaster.contract.UnpackLog(event, "NewCollection", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewCollection is a log parse operation binding the contract event 0x5b84d9550adb7000df7bee717735ecd3af48ea3f66c6886d52e8227548fb228c.
//
// Solidity: event NewCollection(address indexed creator, address collection)
func (_MetaMaster *MetaMasterFilterer) ParseNewCollection(log types.Log) (*MetaMasterNewCollection, error) {
	event := new(MetaMasterNewCollection)
	if err := _MetaMaster.contract.UnpackLog(event, "NewCollection", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetaMasterOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MetaMaster contract.
type MetaMasterOwnershipTransferredIterator struct {
	Event *MetaMasterOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetaMasterOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetaMasterOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetaMasterOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetaMasterOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetaMasterOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetaMasterOwnershipTransferred represents a OwnershipTransferred event raised by the MetaMaster contract.
type MetaMasterOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MetaMaster *MetaMasterFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MetaMasterOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MetaMaster.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MetaMasterOwnershipTransferredIterator{contract: _MetaMaster.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MetaMaster *MetaMasterFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MetaMasterOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MetaMaster.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetaMasterOwnershipTransferred)
				if err := _MetaMaster.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MetaMaster *MetaMasterFilterer) ParseOwnershipTransferred(log types.Log) (*MetaMasterOwnershipTransferred, error) {
	event := new(MetaMasterOwnershipTransferred)
	if err := _MetaMaster.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
